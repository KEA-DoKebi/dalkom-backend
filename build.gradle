buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.sonarqube' version "4.0.0.2929"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

group = 'com.dokebi'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compile {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.8")
}


dependencies {
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation 'org.projectlombok:lombok:1.18.28'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB
    testImplementation 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA
    implementation 'io.jsonwebtoken:jjwt:0.9.1' // jwt
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.json:json:20210307'

    // querydsl dependencies
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"

    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0' // MyBatis
    implementation 'org.springframework.boot:spring-boot-starter-mail' // Email
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // html 동적생성
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch' // Elastic
    implementation 'co.elastic.clients:elasticsearch-java:8.1.2' // Elastic
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3' // Elastic
    implementation 'jakarta.json:jakarta.json-api:2.0.1' // Elastic
}

tasks.named('test') {
    useJUnitPlatform()
}
tasks.named('compileQuerydsl') {
    enabled = false // compileQuerydsl 태스크 비활성화
}

tasks.named('initQuerydslSourcesDir') {
    enabled = false // initQuerydslSourcesDir 태스크 비활성화
}

//querydsl 추가
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootJar {
    archivesBaseName = 'dalkom'
    archiveFileName = 'dalkom.jar'
}
clean {
    delete file('src/main/generated')
}

sonarqube {
    properties {
        property "sonar.projectKey", "KEA-DoKebi_dalkom-backend_AY0ILkkA7nQIqqNyuD-r"
        property "sonar.host.url", "https://b3a1-203-249-127-39.ngrok-free.app"
    }
}

jacoco {
    toolVersion = "0.8.7"
}

test {
    ignoreFailures = true
    finalizedBy 'jacocoTestReport'
    useJUnitPlatform()

//    jacoco {
//        excludes += ["com/dokebi/dalkom/domain/.class",
//                     "com/example/thandbag/exceptionHandler/**",
//                     "com/example/thandbag/repository/**",
//                     "com/example/thandbag/service/KakaoUserService.class"]
//    }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    def QDomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/dokebi/dalkom/domain/**/config",
                    "com/dokebi/dalkom/common/**/",
                    "com/dokebi/dalkom/domain/**/dto",
                    "com/dokebi/dalkom/domain/**/entity",
                    "com/dokebi/dalkom/domain/jira/**",
                    "com/dokebi/dalkom/domain/**/exception",
                    "com/dokebi/dalkom/domain/chat/**",
                    "com/dokebi/dalkom/domain/user/handler",

            ] + QDomains)
        }))
    }
    finalizedBy jacocoTestCoverageVerification
}




